// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: proto/converter.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CurrencyConverterService_Convert_FullMethodName = "/proto.CurrencyConverterService/Convert"
)

// CurrencyConverterServiceClient is the client API for CurrencyConverterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CurrencyConverterServiceClient interface {
	Convert(ctx context.Context, in *CurrencyConverterRequest, opts ...grpc.CallOption) (*CurrencyConverterResponse, error)
}

type currencyConverterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCurrencyConverterServiceClient(cc grpc.ClientConnInterface) CurrencyConverterServiceClient {
	return &currencyConverterServiceClient{cc}
}

func (c *currencyConverterServiceClient) Convert(ctx context.Context, in *CurrencyConverterRequest, opts ...grpc.CallOption) (*CurrencyConverterResponse, error) {
	out := new(CurrencyConverterResponse)
	err := c.cc.Invoke(ctx, CurrencyConverterService_Convert_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CurrencyConverterServiceServer is the server API for CurrencyConverterService service.
// All implementations must embed UnimplementedCurrencyConverterServiceServer
// for forward compatibility
type CurrencyConverterServiceServer interface {
	Convert(context.Context, *CurrencyConverterRequest) (*CurrencyConverterResponse, error)
	mustEmbedUnimplementedCurrencyConverterServiceServer()
}

// UnimplementedCurrencyConverterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCurrencyConverterServiceServer struct {
}

func (UnimplementedCurrencyConverterServiceServer) Convert(context.Context, *CurrencyConverterRequest) (*CurrencyConverterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Convert not implemented")
}
func (UnimplementedCurrencyConverterServiceServer) mustEmbedUnimplementedCurrencyConverterServiceServer() {
}

// UnsafeCurrencyConverterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CurrencyConverterServiceServer will
// result in compilation errors.
type UnsafeCurrencyConverterServiceServer interface {
	mustEmbedUnimplementedCurrencyConverterServiceServer()
}

func RegisterCurrencyConverterServiceServer(s grpc.ServiceRegistrar, srv CurrencyConverterServiceServer) {
	s.RegisterService(&CurrencyConverterService_ServiceDesc, srv)
}

func _CurrencyConverterService_Convert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CurrencyConverterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyConverterServiceServer).Convert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CurrencyConverterService_Convert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyConverterServiceServer).Convert(ctx, req.(*CurrencyConverterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CurrencyConverterService_ServiceDesc is the grpc.ServiceDesc for CurrencyConverterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CurrencyConverterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.CurrencyConverterService",
	HandlerType: (*CurrencyConverterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Convert",
			Handler:    _CurrencyConverterService_Convert_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/converter.proto",
}
